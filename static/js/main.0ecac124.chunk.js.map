{"version":3,"sources":["sections/About.tsx","sections/Sidebar.tsx","sections/Header.tsx","sections/Notice.tsx","sections/Instalation.tsx","sections/Usage.tsx","sections/examples/ExampleWrapper.tsx","../../src/form/types.ts","sections/examples/simple-form-validation/SimpleFormValidation.tsx","../../src/form/reducer.ts","../../src/form/context.tsx","../../src/form/actions.ts","../../src/utils/useValidatiion.ts","../../src/wizard/context.tsx","sections/examples/conditional-form-validation/ConditionalFormValidationExample.tsx","sections/Examples.tsx","App.tsx","index.tsx"],"names":["About","id","SideBar","className","href","Header","type","name","htmlFor","target","rel","Notice","Installation","Usage","ExampleWrapper","title","Example","example","Doc","doc","useState","docsOpen","setDocsOpen","onClick","p","FormName","FormField","formReducer","state","action","errors","FormContext","createContext","FormContextProvider","initialState","validationSchema","children","useReducer","dispatch","setFieldValueAction","payload","formName","field","value","setFieldErrorAction","error","clearFieldError","useFormActions","setErrorIfNeeded","curryN","setError","fieldName","clearError","validate","has","validateField","compose","validateAll","addToErrors","Object","useValidation","setFieldValue","validateForm","values","validation","firstName","val","trim","lastName","SimpleFormValidationExample","useContext","handleFieldChange","useCallback","submit","alert","JSON","stringify","onChange","FirstName","onBlur","ConditionalFormValidationExample","Examples","SimpleFormValidation","lazy","ConditionalFormValidation","fallback","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0ecac124.chunk.js","sourcesContent":["import React from 'react'\n\nconst About = () => (\n  <>\n    <h1 id='about'>React Form FP</h1>\n    <hr />\n    <blockquote>\n      Yet another form library for React, created as context provider, following\n      functional programming principles.{' '}\n    </blockquote>\n    <hr />\n    <p>\n      React Form FP is a state management and validation library for easy form\n      manipulation. Entire API is exposed though context provider, so it makes\n      it easy to work with <b>class components</b> or{' '}\n      <b>functional components</b>\n    </p>\n\n    <p>\n      Library has two major functionalities <b>FormContext</b> for form state\n      and validation and <b>WizardContext</b> for multi-step forms.\n    </p>\n  </>\n)\n\nexport default About\n","import React from 'react'\n\nconst SideBar = () => {\n  return (\n    <div className='md-3 sidebar'>\n      <div className='paper'>\n        <h4>\n          <a href='#about'>About</a>\n        </h4>\n        <h4>\n          <a href='#installation'>Installation</a>\n        </h4>\n        <h4>\n          <a href='#usage'>Usage</a>\n          <h5>\n            <a href='#form-state'>Form State</a>\n          </h5>\n          <h5>\n            <a href='#handle-change'>Handling updates</a>\n          </h5>\n          <h5>\n            <a href='#reading-errors'>Showing Errors</a>\n          </h5>\n        </h4>\n        <h4>\n          <a href='#examples'>Examples</a>\n        </h4>\n        <h5>\n          <a href='#examples-sfv'>Simple Form Validation</a>\n        </h5>\n      </div>\n    </div>\n  )\n}\n\nexport default SideBar\n","import React from 'react'\n\nconst Header = () => {\n  return (\n    <nav className='border fixed split-nav'>\n      <div className='nav-brand'>\n        <h3>\n          <a href='/'>React Form FP</a>\n        </h3>\n      </div>\n      <div className='collapsible'>\n        <input id='collapsible1' type='checkbox' name='collapsible1' />\n        <label htmlFor='collapsible1'>\n          <div className='bar1' />\n          <div className='bar2' />\n          <div className='bar3' />\n        </label>\n        <div className='collapsible-body'>\n          <ul className='inline'>\n            <li>\n              <a href='/'>About</a>\n            </li>\n            <li>\n              <a href='/'>Documentation</a>\n            </li>\n            <li>\n              <a\n                href='https://github.com/rasha08/react-form-fp'\n                target='_blank'\n                rel='noopener noreferrer'\n              >\n                Github\n              </a>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  )\n}\n\nexport default Header\n","import React from 'react'\n\nconst Notice = () => {\n  return (\n    <div className='row flex-center beta-warn'>\n      <div className='md-6'>\n        <input className='alert-state' id='alert-4' type='checkbox' />\n        <div className='alert alert-warning dismissible'>\n          React Form FP library is still in beta version\n          <label className='btn-close' htmlFor='alert-4'>\n            X\n          </label>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Notice\n","import React from 'react'\n\nconst Installation = () => {\n  return (\n    <>\n      <h2 id='installation'>Installation</h2>\n      <p>\n        Install the package from <b>NPM</b> by running:\n      </p>\n      <code>npm install react-form-fp</code>\n      <p> or</p>\n      <code>yarn add react-form-fp</code>\n    </>\n  )\n}\n\nexport default Installation\n","import React from 'react'\n\nconst Usage = () => {\n  return (\n    <>\n      <h2 id='usage'>Usage</h2>\n      <p>Form Context has on 2 major blocks</p>\n      <ul>\n        <li>\n          State\n          <ul>\n            <li>Form State and Errors</li>\n            <li>Field value update handler</li>\n          </ul>\n        </li>\n        <li>\n          Validation Schema\n          <ul>\n            <li>Schema</li>\n            <li>\n              Validators\n              <ul>\n                <li>Single Field Validator</li>\n                <li>Entire Form Validator</li>\n              </ul>\n            </li>\n          </ul>\n        </li>\n      </ul>\n      <h4 id='form-state'>Form State</h4>\n      <p>\n        Form State is created from the initial state provided to the{' '}\n        <b>\n          <i>FormContextProvider</i>\n        </b>{' '}\n        and extended with errors property.\n      </p>\n      <code>{`<FormContextProvider initialState={...} ...> ... </FormContextProvider>`}</code>\n      <p>\n        State model is really simple but strict, initial state must have form\n        name as top level key, and form fields as nested level properties, this\n        is because of support for multiple forms on single view as well as\n        multiple steps forms (Wizard).\n      </p>\n      <p>\n        <i>\n          So for example if we want to handle login form which have a username\n          and password fields, our initial state model would look like this:\n        </i>\n      </p>\n      <code>\n        {`\n        const initialState = {\n          login: {\n            username: '',\n            password: ''\n          }\n        }\n        `}\n      </code>\n      <p>\n        And inside of your component you can consume that state by using{' '}\n        <b>\n          <i>useFormContext()</i>\n        </b>\n      </p>\n      <code>{`const { state: { login } } = useFormContext()`}</code>\n      <p>\n        And this login object is of same structure as you initial state, so you\n        can now have some input with value, for example,{' '}\n        <b>\n          <i>username</i>\n        </b>\n      </p>\n      <code>{`<input value={login.username} ... />`}</code>\n\n      <h4 id='handle-change'>Field value update handler</h4>\n      <p>\n        To update any field value inside the form you need to use{' '}\n        <b>\n          <i>setFieldValue</i>\n        </b>{' '}\n        handler from{' '}\n        <b>\n          <i>useFormContext</i>\n        </b>\n        . It is a very simple method that is in charge of updating specific\n        field within the form.\n      </p>\n      <p>\n        Method is curried function and accepts 3 params{' '}\n        <b>\n          <i>formName</i>\n        </b>\n        <i>(form key in FormContext state) </i>\n        <b>\n          <i>field</i>\n        </b>\n        <i>(key within the form) </i>\n        <b>\n          <i>value</i>\n        </b>\n        <i>(new value for the field)</i>\n      </p>\n      <code>{`const { setFieldValue } = useFormContext()`}</code>\n      <br />\n      <code>...</code>\n      <br />\n      <code>{`const handleFormChange = setFieldValue('login')`}</code>\n      <br />\n      <code>\n        {`const handleFieldChange = (field) => ({ target: { value }}) => handleFormChange(field)(value);`}\n      </code>\n      <br />\n      <code>...</code>\n      <br />\n      <code>{`<input value={login.username} onChange={handleFieldChange('username')} ... />`}</code>\n\n      <h4 id='reading-errors'>Errors</h4>\n      <p>\n        Errors are stored inside of the{' '}\n        <b>\n          <i>FormContext state</i>\n        </b>{' '}\n        by the{' '}\n        <b>\n          <i>errors</i>\n        </b>{' '}\n        key and every form field that has a defined validator have either{' '}\n        <b>\n          <i>null</i>\n        </b>{' '}\n        or{' '}\n        <b>\n          <i>string</i>\n        </b>{' '}\n        value\n      </p>\n      <p>\n        In our login example, error message logic for <i>username</i> field\n        should look something like this\n      </p>\n      <code>...</code>\n      <br />\n      <code>{`{!!errors.username && <p className='text-danger'>{errors.username}</p>} `}</code>\n      <br />\n      <code>...</code>\n    </>\n  )\n}\n\nexport default Usage\n","import React, { useState } from 'react'\n\nconst ExampleWrapper = ({ title, id, example: Example, doc: Doc }: any) => {\n  const [docsOpen, setDocsOpen] = useState(false)\n  return (\n    <>\n      <h4 id={id}>{title}</h4>\n      <div className='example row'>\n        <Example />\n        <div className={'example-doc'}>{docsOpen && <Doc />}</div>\n        <button\n          className='example-toggle'\n          onClick={() => setDocsOpen((p) => !p)}\n        >\n          {docsOpen ? 'Hide Code' : 'Show Code'}\n        </button>\n      </div>\n    </>\n  )\n}\n\nexport default ExampleWrapper\n","export const SET_FILED_VALUE = 'SET_FILED_VALUE'\nexport const SET_FILED_ERROR = 'SET_FIELD_ERROR'\nexport const CLEAR_FIELD_ERROR = 'CLEAR_FIELD_ERROR'\n\nexport type FieldName<T> = keyof T\nexport type FieldValue = any // TODO find alternate solution\nexport type ErrorState<T> = {\n  errors: {\n    [key in FieldName<T>]: string | null\n  }\n}\n\nexport type FormContextState<FormName extends number | string, T> = {\n  [key in FormName]: T\n} &\n  ErrorState<T> &\n  unknown\n\nexport type StateChange<T> = {\n  field: FieldName<T>\n}\n\nexport type SetFieldValueActionPayload<T, FormName> = StateChange<T> & {\n  value: FieldValue\n  formName: FormName\n}\n\nexport type SetFieldValueAction<T, FormName> = {\n  type: typeof SET_FILED_VALUE\n  payload: SetFieldValueActionPayload<T, FormName>\n}\n\nexport type SetFieldErrorActionPayload<T> = StateChange<T> & {\n  error: string\n}\n\nexport type SetFieldErrorAction<T> = {\n  type: typeof SET_FILED_ERROR\n  payload: SetFieldErrorActionPayload<T>\n}\n\nexport type ClearFieldErrorAction<T> = {\n  type: typeof CLEAR_FIELD_ERROR\n  payload: StateChange<T>\n}\n\nexport type FormReducer = <FormName extends string | number, T>(\n  state: FormContextState<FormName, T>,\n  action:\n    | SetFieldValueAction<T, FormName>\n    | SetFieldErrorAction<T>\n    | ClearFieldErrorAction<T>\n) => FormContextState<FormName, T>\n\nexport type UseFormActions<FormName, T> = {\n  setFieldValueAction: (\n    formName: FormName,\n    field: FieldName<T>,\n    value: FieldValue\n  ) => void\n  setFieldErrorAction: (field: FieldName<T>, error: string) => void\n  clearFieldError: (field: FieldName<T>) => void\n}\n\nexport type FormActionDispatcher<FormName, T> = (\n  action:\n    | SetFieldValueAction<T, FormName>\n    | SetFieldErrorAction<T>\n    | ClearFieldErrorAction<T>\n) => void\n","import React, { useCallback, ChangeEvent } from 'react'\nimport {\n  FormContextProvider,\n  ValidationSchema,\n  useFormContext\n} from 'react-form-fp'\n\nenum FormName {\n  Example = 'example'\n}\nenum FormField {\n  FirstName = 'firstName',\n  LastName = 'lastName'\n}\n\ntype FormState = {\n  firstName: string\n  lastName: string\n}\n\nconst validation: ValidationSchema<FormName, FormField> = {\n  example: {\n    firstName: (val: string) =>\n      !!val.trim() ? null : 'First name is required',\n    lastName: () => null // Empty validator\n  }\n}\n\nconst SimpleFormValidationExample = () => {\n  const {\n    setFieldValue,\n    validate,\n    validateForm,\n    state,\n    state: { errors, example }\n  } = useFormContext<FormName, FormState>()\n\n  const handleFieldChange = useCallback(\n    (field: FormField) => ({\n      target: { value }\n    }: ChangeEvent<HTMLInputElement>) => {\n      setFieldValue(FormName.Example)(field)(value)\n    },\n    [setFieldValue]\n  )\n\n  const validateField = useCallback(\n    (field: FormField) => ({\n      target: { value }\n    }: ChangeEvent<HTMLInputElement>) => {\n      validate(FormName.Example)(field)(value || example[field])\n    },\n    [validate, example]\n  )\n\n  const submit = useCallback(() => {\n    if (validateForm(FormName.Example, example)) {\n      alert(JSON.stringify(example, null, 2))\n    }\n  }, [validateForm, example])\n\n  return (\n    <>\n      <div className='form-group col-6'>\n        <label>First Name</label>\n        <input\n          value={example.firstName}\n          onChange={handleFieldChange(FormField.FirstName)}\n          onBlur={validateField(FormField.FirstName)}\n        />\n        {!!errors.firstName && (\n          <p className='text-danger'>{errors.firstName}</p>\n        )}\n\n        <label>Last Name</label>\n        <input\n          value={example.lastName}\n          onChange={handleFieldChange(FormField.FirstName)}\n          onBlur={validateField(FormField.FirstName)}\n        />\n        {!!errors.lastName && <p className='text-danger'>{errors.lastName}</p>}\n\n        <button onClick={submit}>Submit Form</button>\n      </div>\n      <div className='col-6'>\n        <b>Form ContextState</b>\n        <pre>\n          <code>{JSON.stringify(state, null, 2)}</code>\n        </pre>\n      </div>\n    </>\n  )\n}\n\nexport default () => (\n  <FormContextProvider<FormName, FormState>\n    initialState={{ example: { firstName: '', lastName: '' } }}\n    validationSchema={validation}\n  >\n    <SimpleFormValidationExample />\n  </FormContextProvider>\n)\n","import {\n  CLEAR_FIELD_ERROR,\n  FormReducer,\n  SET_FILED_ERROR,\n  SET_FILED_VALUE\n} from './types'\n\nexport const formReducer: FormReducer = (state, action) => {\n  switch (action.type) {\n    case CLEAR_FIELD_ERROR:\n      return {\n        ...state,\n        ...{ errors: { ...state.errors, [action.payload.field]: null } }\n      }\n    case SET_FILED_ERROR:\n      return {\n        ...state,\n        ...{\n          errors: {\n            ...state.errors,\n            ...{ [action.payload.field]: action.payload.error }\n          }\n        }\n      }\n    case SET_FILED_VALUE:\n      return {\n        ...state,\n        ...{\n          [action.payload.formName]: {\n            ...state[action.payload.formName],\n            ...{\n              [action.payload.field]: action.payload.value\n            }\n          }\n        }\n      }\n    default:\n      return state\n  }\n}\n","import React, {\n  ComponentProps,\n  createContext,\n  FC,\n  useContext,\n  useReducer\n} from 'react'\nimport {\n  FieldName,\n  FieldValue,\n  FormActionDispatcher,\n  FormContextState\n} from './types'\nimport { formReducer } from './reducer'\nimport { useFormActions } from './actions'\nimport { useValidation, ValidationSchema } from '../utils/useValidatiion'\n\ntype Validate<FormName extends string | number, T> = (\n  formName: FormName\n) => (fieldName: FieldName<T>) => (value: FieldValue) => void\ntype SetFieldValue<FormName extends string | number, T> = (\n  formName: FormName\n) => (field: FieldName<T>) => (value: FieldValue) => void\ntype ValidateForm<FormName extends string | number, T> = (\n  formName: FormName,\n  values: T\n) => boolean\n\ntype UseFormContext<FormName extends string | number, T> = {\n  state: FormContextState<FormName, T>\n  validate: Validate<FormName, T>\n  setFieldValue: SetFieldValue<FormName, T>\n  validateForm: ValidateForm<FormName, T>\n}\n\nconst FormContext = createContext({} as any)\nexport const useFormContext = <FormName extends string | number, T>() =>\n  useContext<UseFormContext<FormName, T>>(FormContext)\n\ninterface Props<FormName extends string | number, T>\n  extends ComponentProps<FC> {\n  initialState: { [key in FormName]: T } | unknown\n  validationSchema: ValidationSchema\n}\n\ntype Form = <FormName extends string | number, T>(\n  props: Props<FormName, T>\n) => JSX.Element\n\nexport const FormContextProvider: Form = <FormName extends string | number, T>({\n  initialState,\n  validationSchema,\n  children\n}) => {\n  const [state, dispatch] = useReducer(formReducer, {\n     ...initialState,\n    ...{ errors: {} }\n  })\n\n  const {\n    setFieldErrorAction,\n    clearFieldError,\n    setFieldValueAction\n  } = useFormActions<FormName, T>(\n    state as FormContextState<FormName, T>,\n    dispatch as FormActionDispatcher<FormName, T>\n  )\n\n  const { validate, validateAll } = useValidation(\n    validationSchema,\n    setFieldErrorAction,\n    clearFieldError\n  )\n\n  const validateForm: ValidateForm<FormName, T> = (formName, values) => {\n    return validateAll(formName, values)\n  }\n\n  const setFieldValue: SetFieldValue<FormName, T> = (formName) => (\n    fieldName\n  ) => (value) => {\n    if ((state as FormContextState<FormName, T>).errors[fieldName]) {\n      // @ts-ignore\n      validate(formName)(fieldName)(value)\n    }\n\n    setFieldValueAction(formName, fieldName, value)\n  }\n\n  return (\n    <FormContext.Provider\n      value={{ setFieldValue, validate, state, validateForm }}\n    >\n      {children}\n    </FormContext.Provider>\n  )\n}\n","import {\n  CLEAR_FIELD_ERROR,\n  FieldName,\n  FieldValue,\n  FormActionDispatcher,\n  FormContextState,\n  SET_FILED_ERROR,\n  SET_FILED_VALUE,\n  UseFormActions\n} from './types'\n\nexport const useFormActions = <FormName extends string | number, T>(\n  state: FormContextState<FormName, T>,\n  dispatch: FormActionDispatcher<FormName, T>\n): UseFormActions<FormName, T> => {\n  const setFieldValueAction = (\n    formName: FormName,\n    field: FieldName<T>,\n    value: FieldValue\n  ): void => {\n    dispatch({\n      type: SET_FILED_VALUE,\n      payload: {\n        formName,\n        field,\n        value\n      }\n    })\n  }\n\n  const setFieldErrorAction = (field: FieldName<T>, error: string): void => {\n    dispatch({\n      type: SET_FILED_ERROR,\n      payload: {\n        field,\n        error\n      }\n    })\n  }\n\n  const clearFieldError = (field: FieldName<T>): void => {\n    if (!state.errors[field]) {\n      return\n    }\n\n    dispatch({\n      type: CLEAR_FIELD_ERROR,\n      payload: {\n        field\n      }\n    })\n  }\n\n  return { setFieldValueAction, setFieldErrorAction, clearFieldError }\n}\n","import { has, curryN, compose } from 'ramda'\n\nexport type ValidationSchema<\n  FormName extends number | string = string,\n  FormField extends number | string = string\n> = {\n  [key in FormName]: {\n    [key in FormField]: (value: any) => string | null\n  }\n}\n\nexport const useValidation = (\n  validationSchema: ValidationSchema,\n  setError: (field: any, error: string) => void,\n  clearError: (field: any) => void\n) => {\n  const setErrorIfNeeded = curryN(\n    2,\n    (fieldName: string, error: string | null) => {\n      return error ? setError(fieldName, error) : clearError(fieldName)\n    }\n  )\n\n  const validate = curryN(\n    3,\n    (formName: string, fieldName: string, value: any): void => {\n      if (!has(formName, validationSchema)) {\n        return\n      }\n      if (!has(fieldName, validationSchema[formName])) {\n        return\n      }\n\n      const validateField = validationSchema[formName][fieldName]\n\n      compose(setErrorIfNeeded(fieldName as any), validateField)(value)\n    }\n  )\n\n  const validateAll = (\n    formName: string | number,\n    values: { [key: string]: any }\n  ): boolean => {\n    const errors: boolean[] = []\n\n    const addToErrors = (error: string | null) => {\n      if (error) {\n        errors.push(!!errors)\n      }\n\n      return error\n    }\n\n    Object.entries(values).forEach(([fieldName, value]) => {\n      if (!has(formName as string, validationSchema)) {\n        return\n      }\n      if (!has(fieldName, validationSchema[formName])) {\n        return\n      }\n\n      compose(\n        setErrorIfNeeded(fieldName as any),\n        addToErrors,\n        validationSchema[formName][fieldName]\n      )(value)\n    })\n\n    return !errors.length\n  }\n\n  return { validate, validateAll }\n}\n","import React, {\n  ComponentProps,\n  createContext,\n  Dispatch,\n  FC,\n  SetStateAction,\n  useCallback,\n  useContext,\n  useReducer,\n  useState\n} from 'react'\nimport { is, isNil } from 'ramda'\nimport { wizardReducer } from './reducer'\nimport { useWizardActions } from './actions'\nimport { WizardContextState, WizardStep } from './types'\n\ntype ChangeStep = (step?: number) => void\ntype SetVisibility = (isVisible: boolean) => void\ntype SetSteps = (steps: WizardStep[]) => void\ntype StepValidator = () => boolean\ntype NextHandler = () => Promise<boolean>\n\ntype WizardContext = {\n  state: WizardContextState\n  changeStep: ChangeStep\n  setVisibility: SetVisibility\n  setSteps: SetSteps\n  setValidator: Dispatch<StepValidator>\n  setOnNextHandle: Dispatch<NextHandler>\n}\n\nconst WizardContext = createContext({} as WizardContext)\n\nexport const useWizardContext = (): WizardContext => useContext(WizardContext)\n\nexport interface Props extends ComponentProps<FC> {\n  steps: WizardStep[]\n  activeStep?: number\n}\n\nexport const WizardContextProvider: FC<Props> = ({\n  steps,\n  activeStep = 0,\n  children\n}) => {\n  const [state, dispatch] = useReducer(wizardReducer, {\n    showWizard: true,\n    steps,\n    activeStep\n  })\n\n  const [stepValidator, setStepValidator]: [\n    StepValidator,\n    Dispatch<SetStateAction<() => boolean>>\n  ] = useState<() => boolean>(() => () => true)\n  const [nextCallback, setNextCallback]: [\n    NextHandler,\n    Dispatch<SetStateAction<() => Promise<boolean>>>\n  ] = useState<() => Promise<boolean>>(() => () => Promise.resolve(true))\n  const {\n    setActiveStepAction,\n    setWizardVisibilityAction,\n    setWizardStepsAction\n  } = useWizardActions(state, dispatch)\n\n  const setSteps: SetSteps = (steps) => {\n    setWizardStepsAction(steps)\n  }\n\n  const setValidator = (callback: () => boolean): void => {\n    setStepValidator(() => () => callback())\n  }\n\n  const setOnNextHandle = useCallback(\n    (callback: () => Promise<boolean>): void => {\n      setNextCallback(() => () => callback())\n    },\n    [setNextCallback]\n  )\n\n  const changeStep: ChangeStep = async (step) => {\n    if (!stepValidator()) {\n      return\n    }\n\n    if (!(await nextCallback())) {\n      return\n    }\n\n    if (!isNil(step) && is(Number, step)) {\n      setActiveStepAction(step)\n    } else {\n      setActiveStepAction(state.activeStep + 1)\n    }\n  }\n\n  const setVisibility: SetVisibility = (isVisible) => {\n    setWizardVisibilityAction(isVisible)\n  }\n\n  return (\n    <WizardContext.Provider\n      value={{\n        state,\n        setSteps,\n        changeStep,\n        setVisibility,\n        setValidator,\n        setOnNextHandle\n      }}\n    >\n      {children}\n    </WizardContext.Provider>\n  )\n}\n","import React from 'react'\nimport { FormContextProvider } from 'react-form-fp'\n\nconst ConditionalFormValidationExample = () => {\n  return (\n    <>\n      <h6>ConditionalFormValidationExample</h6>\n    </>\n  )\n}\n\nexport default () => (\n  <FormContextProvider initialState={{}} validationSchema={{}}>\n    <ConditionalFormValidationExample />\n  </FormContextProvider>\n)\n","import React, { lazy, Suspense } from 'react'\n\nimport ExampleWrapper from './examples/ExampleWrapper'\n// @ts-ignore\nimport { importMDX } from 'mdx.macro'\n\nimport SimpleFormValidationExample from './examples/simple-form-validation/SimpleFormValidation'\nimport ConditionalFormValidationExample from './examples/conditional-form-validation/ConditionalFormValidationExample'\n\nconst Examples = () => {\n  const SimpleFormValidation = lazy(() =>\n    importMDX('./examples/simple-form-validation/SimpleFormValidation.mdx')\n  )\n  const ConditionalFormValidation = lazy(() =>\n    importMDX(\n      './examples/conditional-form-validation/ConditionalFormValidation.mdx'\n    )\n  )\n\n  return (\n    <Suspense fallback={'...'}>\n      <h2 id='examples'>Examples</h2>\n      <ExampleWrapper\n        example={SimpleFormValidationExample}\n        doc={SimpleFormValidation}\n        title={'Simple Form validation'}\n        id='examples-sfv'\n      />\n      <ExampleWrapper\n        example={ConditionalFormValidationExample}\n        doc={ConditionalFormValidation}\n        title={'Conditional Form validation'}\n        id='examples-cfv'\n      />\n    </Suspense>\n  )\n}\n\nexport default Examples\n","import React from 'react'\n\nimport './index.css'\nimport About from './sections/About'\nimport SideBar from './sections/Sidebar'\nimport Header from './sections/Header'\nimport Notice from './sections/Notice'\nimport Installation from './sections/Instalation'\nimport Usage from './sections/Usage'\nimport Examples from './sections/Examples'\n\nconst App = () => {\n  return (\n    <div className='container-fluid'>\n      <Header />\n      <Notice />\n      <div className='row flex-center'>\n        <SideBar />\n        <div className='md-8 offset-1'>\n          <div className='paper'>\n            <About />\n            <div className='section'>\n              <Installation />\n            </div>\n            <div className='section'>\n              <Usage />\n            </div>\n            <div className='section'>\n              <Examples />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}