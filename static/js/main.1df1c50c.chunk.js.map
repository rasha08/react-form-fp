{"version":3,"sources":["sections/examples/simple-form-validation/SimpleFormValidation.tsx","sections/About.tsx","sections/Sidebar.tsx","sections/Header.tsx","sections/Notice.tsx","sections/Instalation.tsx","sections/Usage.tsx","../../src/form/reducer.ts","../../src/form/types.ts","../../src/form/context.tsx","../../src/form/actions.ts","../../src/utils/useValidatiion.ts","../../src/wizard/context.tsx","sections/examples/ExampleWrapper.tsx","sections/Examples.tsx","App.tsx","index.tsx","sections/examples/simple-form-validation/SimpleFormValidation.md"],"names":["FormName","FormField","About","id","SideBar","className","href","Header","type","name","htmlFor","target","rel","Notice","Installation","Usage","formReducer","state","action","errors","error","value","FormContext","createContext","FormContextProvider","children","useReducer","setFieldValueAction","dispatch","payload","formName","field","setFieldErrorAction","clearFieldError","useFormActions","setErrorIfNeeded","curryN","setError","fieldName","clearError","validate","has","validationSchema","validateField","compose","validateAll","addToErrors","Object","useValidation","setFieldValue","validateForm","values","validation","example","firstName","val","trim","lastName","SimpleFormValidationExample","useContext","handleFieldChange","useCallback","Example","submit","alert","JSON","stringify","onChange","FirstName","onBlur","onClick","initialState","ExampleWrapper","title","doc","useState","docsOpen","setDocsOpen","source","p","Examples","fallback","SimpleFormValidation","App","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.1df1c50c.chunk.js","sourcesContent":["import React, { useCallback, ChangeEvent } from 'react'\nimport {\n  FormContextProvider,\n  ValidationSchema,\n  useFormContext\n} from 'react-form-fp'\n\nenum FormName {\n  Example = 'example'\n}\nenum FormField {\n  FirstName = 'firstName',\n  LastName = 'lastName'\n}\n\ntype FormState = {\n  firstName: string\n  lastName: string\n}\n\nconst validation: ValidationSchema<FormName, FormField> = {\n  example: {\n    firstName: (val: string) =>\n      !!val.trim() ? null : 'First name is required',\n    lastName: () => null // Empty validator\n  }\n}\n\nconst SimpleFormValidationExample = () => {\n  const {\n    setFieldValue,\n    validate,\n    validateForm,\n    state,\n    state: { errors, example }\n  } = useFormContext<FormName, FormState>()\n\n  const handleFieldChange = useCallback(\n    (field: FormField) => ({\n      target: { value }\n    }: ChangeEvent<HTMLInputElement>) => {\n      setFieldValue(FormName.Example)(field)(value)\n    },\n    [setFieldValue]\n  )\n\n  const validateField = useCallback(\n    (field: FormField) => ({\n      target: { value }\n    }: ChangeEvent<HTMLInputElement>) => {\n      validate(FormName.Example)(field)(value || example[field])\n    },\n    [validate, example]\n  )\n\n  const submit = useCallback(() => {\n    if (validateForm(FormName.Example, example)) {\n      alert(JSON.stringify(example, null, 2))\n    }\n  }, [validateForm, example])\n\n  return (\n    <>\n      <div className='form-group col-6'>\n        <label>First Name</label>\n        <input\n          value={example.firstName}\n          onChange={handleFieldChange(FormField.FirstName)}\n          onBlur={validateField(FormField.FirstName)}\n        />\n        {!!errors.firstName && (\n          <p className='text-danger'>{errors.firstName}</p>\n        )}\n\n        <label>Last Name</label>\n        <input\n          value={example.lastName}\n          onChange={handleFieldChange(FormField.FirstName)}\n          onBlur={validateField(FormField.FirstName)}\n        />\n        {!!errors.lastName && <p className='text-danger'>{errors.lastName}</p>}\n\n        <button onClick={submit}>Submit Form</button>\n      </div>\n      <div className='col-6'>\n        <b>Form ContextState</b>\n        <pre>\n          <code>{JSON.stringify(state, null, 2)}</code>\n        </pre>\n      </div>\n    </>\n  )\n}\n\nexport default () => (\n  <FormContextProvider<FormName, FormState>\n    initialState={{ example: { firstName: '', lastName: '' } }}\n    validationSchema={validation}\n  >\n    <SimpleFormValidationExample />\n  </FormContextProvider>\n)\n","import React from 'react'\n\nconst About = () => (\n  <>\n    <h1 id='about'>React Form FP</h1>\n    <hr />\n    <blockquote>\n      Yet another form library for React, created as context provider, following\n      functional programming principles.{' '}\n    </blockquote>\n    <hr />\n    <p>\n      React Form FP is a state management and validation library for easy form\n      manipulation. Entire API is exposed though context provider, so it makes\n      it easy to work with <b>class components</b> or{' '}\n      <b>functional components</b>\n    </p>\n\n    <p>\n      Library has two major functionalities <b>FormContext</b> for form state\n      and validation and <b>WizardContext</b> for multi-step forms.\n    </p>\n  </>\n)\n\nexport default About\n","import React from 'react'\n\nconst SideBar = () => {\n  return (\n    <div className='md-3 sidebar'>\n      <div className='paper'>\n        <h4>\n          <a href='#about'>About</a>\n        </h4>\n        <h4>\n          <a href='#installation'>Installation</a>\n        </h4>\n        <h4>\n          <a href='#usage'>Usage</a>\n        </h4>\n        <h4>\n          <a href='#examples'>Examples</a>\n        </h4>\n        <h5>\n          <a href='#examples-sfv'>Simple Form Validation</a>\n        </h5>\n      </div>\n    </div>\n  )\n}\n\nexport default SideBar\n","import React from 'react'\n\nconst Header = () => {\n  return (\n    <nav className='border fixed split-nav'>\n      <div className='nav-brand'>\n        <h3>\n          <a href='/'>React Form FP</a>\n        </h3>\n      </div>\n      <div className='collapsible'>\n        <input id='collapsible1' type='checkbox' name='collapsible1' />\n        <label htmlFor='collapsible1'>\n          <div className='bar1' />\n          <div className='bar2' />\n          <div className='bar3' />\n        </label>\n        <div className='collapsible-body'>\n          <ul className='inline'>\n            <li>\n              <a href='/'>About</a>\n            </li>\n            <li>\n              <a href='/'>Documentation</a>\n            </li>\n            <li>\n              <a\n                href='https://github.com/rasha08/react-form-fp'\n                target='_blank'\n                rel='noopener noreferrer'\n              >\n                Github\n              </a>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  )\n}\n\nexport default Header\n","import React from 'react'\n\nconst Notice = () => {\n  return (\n    <div className='row flex-center beta-warn'>\n      <div className='md-6'>\n        <input className='alert-state' id='alert-4' type='checkbox' />\n        <div className='alert alert-warning dismissible'>\n          React Form FP library is still in beta version\n          <label className='btn-close' htmlFor='alert-4'>\n            X\n          </label>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Notice\n","import React from 'react'\n\nconst Installation = () => {\n  return (\n    <>\n      <h2 id='installation'>Installation</h2>\n      <p>\n        Install the package from <b>NPM</b> by running:\n      </p>\n      <code>npm install react-form-fp</code>\n      <p> or</p>\n      <code>yarn add react-form-fp</code>\n    </>\n  )\n}\n\nexport default Installation\n","import React from 'react'\n\nconst Usage = () => {\n  return (\n    <>\n      <h2 id='usage'>Usage</h2>\n      <p>Coming Soon...</p>\n    </>\n  )\n}\n\nexport default Usage\n","import {\n  CLEAR_FIELD_ERROR,\n  FormReducer,\n  SET_FILED_ERROR,\n  SET_FILED_VALUE\n} from './types'\n\nexport const formReducer: FormReducer = (state, action) => {\n  switch (action.type) {\n    case CLEAR_FIELD_ERROR:\n      return {\n        ...state,\n        ...{ errors: { ...state.errors, [action.payload.field]: null } }\n      }\n    case SET_FILED_ERROR:\n      return {\n        ...state,\n        ...{\n          errors: {\n            ...state.errors,\n            ...{ [action.payload.field]: action.payload.error }\n          }\n        }\n      }\n    case SET_FILED_VALUE:\n      return {\n        ...state,\n        ...{\n          [action.payload.formName]: {\n            ...state[action.payload.formName],\n            ...{\n              [action.payload.field]: action.payload.value\n            }\n          }\n        }\n      }\n    default:\n      return state\n  }\n}\n","export const SET_FILED_VALUE = 'SET_FILED_VALUE'\nexport const SET_FILED_ERROR = 'SET_FIELD_ERROR'\nexport const CLEAR_FIELD_ERROR = 'CLEAR_FIELD_ERROR'\n\nexport type FieldName<T> = keyof T\nexport type FieldValue = any // TODO find alternate solution\nexport type ErrorState<T> = {\n  errors: {\n    [key in FieldName<T>]: string | null\n  }\n}\n\nexport type FormContextState<FormName extends number | string, T> = {\n  [key in FormName]: T\n} &\n  ErrorState<T> &\n  unknown\n\nexport type StateChange<T> = {\n  field: FieldName<T>\n}\n\nexport type SetFieldValueActionPayload<T, FormName> = StateChange<T> & {\n  value: FieldValue\n  formName: FormName\n}\n\nexport type SetFieldValueAction<T, FormName> = {\n  type: typeof SET_FILED_VALUE\n  payload: SetFieldValueActionPayload<T, FormName>\n}\n\nexport type SetFieldErrorActionPayload<T> = StateChange<T> & {\n  error: string\n}\n\nexport type SetFieldErrorAction<T> = {\n  type: typeof SET_FILED_ERROR\n  payload: SetFieldErrorActionPayload<T>\n}\n\nexport type ClearFieldErrorAction<T> = {\n  type: typeof CLEAR_FIELD_ERROR\n  payload: StateChange<T>\n}\n\nexport type FormReducer = <FormName extends string | number, T>(\n  state: FormContextState<FormName, T>,\n  action:\n    | SetFieldValueAction<T, FormName>\n    | SetFieldErrorAction<T>\n    | ClearFieldErrorAction<T>\n) => FormContextState<FormName, T>\n\nexport type UseFormActions<FormName, T> = {\n  setFieldValueAction: (\n    formName: FormName,\n    field: FieldName<T>,\n    value: FieldValue\n  ) => void\n  setFieldErrorAction: (field: FieldName<T>, error: string) => void\n  clearFieldError: (field: FieldName<T>) => void\n}\n\nexport type FormActionDispatcher<FormName, T> = (\n  action:\n    | SetFieldValueAction<T, FormName>\n    | SetFieldErrorAction<T>\n    | ClearFieldErrorAction<T>\n) => void\n","import React, {\n  ComponentProps,\n  createContext,\n  FC,\n  useContext,\n  useReducer\n} from 'react'\nimport {\n  FieldName,\n  FieldValue,\n  FormActionDispatcher,\n  FormContextState\n} from './types'\nimport { formReducer } from './reducer'\nimport { useFormActions } from './actions'\nimport { useValidation, ValidationSchema } from '../utils/useValidatiion'\n\ntype Validate<FormName extends string | number, T> = (\n  formName: FormName\n) => (fieldName: FieldName<T>) => (value: FieldValue) => void\ntype SetFieldValue<FormName extends string | number, T> = (\n  formName: FormName\n) => (field: FieldName<T>) => (value: FieldValue) => void\ntype ValidateForm<FormName extends string | number, T> = (\n  formName: FormName,\n  values: T\n) => boolean\n\ntype UseFormContext<FormName extends string | number, T> = {\n  state: FormContextState<FormName, T>\n  validate: Validate<FormName, T>\n  setFieldValue: SetFieldValue<FormName, T>\n  validateForm: ValidateForm<FormName, T>\n}\n\nconst FormContext = createContext({} as any)\nexport const useFormContext = <FormName extends string | number, T>() =>\n  useContext<UseFormContext<FormName, T>>(FormContext)\n\ninterface Props<FormName extends string | number, T>\n  extends ComponentProps<FC> {\n  initialState: { [key in FormName]: T } | unknown\n  validationSchema: ValidationSchema\n}\n\ntype Form = <FormName extends string | number, T>(\n  props: Props<FormName, T>\n) => JSX.Element\n\nexport const FormContextProvider: Form = <FormName extends string | number, T>({\n  initialState,\n  validationSchema,\n  children\n}) => {\n  const [state, dispatch] = useReducer(formReducer, {\n     ...initialState,\n    ...{ errors: {} }\n  })\n\n  const {\n    setFieldErrorAction,\n    clearFieldError,\n    setFieldValueAction\n  } = useFormActions<FormName, T>(\n    state as FormContextState<FormName, T>,\n    dispatch as FormActionDispatcher<FormName, T>\n  )\n\n  const { validate, validateAll } = useValidation(\n    validationSchema,\n    setFieldErrorAction,\n    clearFieldError\n  )\n\n  const validateForm: ValidateForm<FormName, T> = (formName, values) => {\n    return validateAll(formName, values)\n  }\n\n  const setFieldValue: SetFieldValue<FormName, T> = (formName) => (\n    fieldName\n  ) => (value) => {\n    if ((state as FormContextState<FormName, T>).errors[fieldName]) {\n      // @ts-ignore\n      validate(formName)(fieldName)(value)\n    }\n\n    setFieldValueAction(formName, fieldName, value)\n  }\n\n  return (\n    <FormContext.Provider\n      value={{ setFieldValue, validate, state, validateForm }}\n    >\n      {children}\n    </FormContext.Provider>\n  )\n}\n","import {\n  CLEAR_FIELD_ERROR,\n  FieldName,\n  FieldValue,\n  FormActionDispatcher,\n  FormContextState,\n  SET_FILED_ERROR,\n  SET_FILED_VALUE,\n  UseFormActions\n} from './types'\n\nexport const useFormActions = <FormName extends string | number, T>(\n  state: FormContextState<FormName, T>,\n  dispatch: FormActionDispatcher<FormName, T>\n): UseFormActions<FormName, T> => {\n  const setFieldValueAction = (\n    formName: FormName,\n    field: FieldName<T>,\n    value: FieldValue\n  ): void => {\n    dispatch({\n      type: SET_FILED_VALUE,\n      payload: {\n        formName,\n        field,\n        value\n      }\n    })\n  }\n\n  const setFieldErrorAction = (field: FieldName<T>, error: string): void => {\n    dispatch({\n      type: SET_FILED_ERROR,\n      payload: {\n        field,\n        error\n      }\n    })\n  }\n\n  const clearFieldError = (field: FieldName<T>): void => {\n    if (!state.errors[field]) {\n      return\n    }\n\n    dispatch({\n      type: CLEAR_FIELD_ERROR,\n      payload: {\n        field\n      }\n    })\n  }\n\n  return { setFieldValueAction, setFieldErrorAction, clearFieldError }\n}\n","import { has, curryN, compose } from 'ramda'\n\nexport type ValidationSchema<\n  FormName extends number | string = string,\n  FormField extends number | string = string\n> = {\n  [key in FormName]: {\n    [key in FormField]: (value: any) => string | null\n  }\n}\n\nexport const useValidation = (\n  validationSchema: ValidationSchema,\n  setError: (field: any, error: string) => void,\n  clearError: (field: any) => void\n) => {\n  const setErrorIfNeeded = curryN(\n    2,\n    (fieldName: string, error: string | null) => {\n      return error ? setError(fieldName, error) : clearError(fieldName)\n    }\n  )\n\n  const validate = curryN(\n    3,\n    (formName: string, fieldName: string, value: any): void => {\n      if (!has(formName, validationSchema)) {\n        return\n      }\n      if (!has(fieldName, validationSchema[formName])) {\n        return\n      }\n\n      const validateField = validationSchema[formName][fieldName]\n\n      compose(setErrorIfNeeded(fieldName as any), validateField)(value)\n    }\n  )\n\n  const validateAll = (\n    formName: string | number,\n    values: { [key: string]: any }\n  ): boolean => {\n    const errors: boolean[] = []\n\n    const addToErrors = (error: string | null) => {\n      if (error) {\n        errors.push(!!errors)\n      }\n\n      return error\n    }\n\n    Object.entries(values).forEach(([fieldName, value]) => {\n      if (!has(formName as string, validationSchema)) {\n        return\n      }\n      if (!has(fieldName, validationSchema[formName])) {\n        return\n      }\n\n      compose(\n        setErrorIfNeeded(fieldName as any),\n        addToErrors,\n        validationSchema[formName][fieldName]\n      )(value)\n    })\n\n    return !errors.length\n  }\n\n  return { validate, validateAll }\n}\n","import React, {\n  ComponentProps,\n  createContext,\n  Dispatch,\n  FC,\n  SetStateAction,\n  useCallback,\n  useContext,\n  useReducer,\n  useState\n} from 'react'\nimport { is, isNil } from 'ramda'\nimport { wizardReducer } from './reducer'\nimport { useWizardActions } from './actions'\nimport { WizardContextState, WizardStep } from './types'\n\ntype ChangeStep = (step?: number) => void\ntype SetVisibility = (isVisible: boolean) => void\ntype SetSteps = (steps: WizardStep[]) => void\ntype StepValidator = () => boolean\ntype NextHandler = () => Promise<boolean>\n\ntype WizardContext = {\n  state: WizardContextState\n  changeStep: ChangeStep\n  setVisibility: SetVisibility\n  setSteps: SetSteps\n  setValidator: Dispatch<StepValidator>\n  setOnNextHandle: Dispatch<NextHandler>\n}\n\nconst WizardContext = createContext({} as WizardContext)\n\nexport const useWizardContext = (): WizardContext => useContext(WizardContext)\n\nexport interface Props extends ComponentProps<FC> {\n  steps: WizardStep[]\n  activeStep?: number\n}\n\nexport const WizardContextProvider: FC<Props> = ({\n  steps,\n  activeStep = 0,\n  children\n}) => {\n  const [state, dispatch] = useReducer(wizardReducer, {\n    showWizard: true,\n    steps,\n    activeStep\n  })\n\n  const [stepValidator, setStepValidator]: [\n    StepValidator,\n    Dispatch<SetStateAction<() => boolean>>\n  ] = useState<() => boolean>(() => () => true)\n  const [nextCallback, setNextCallback]: [\n    NextHandler,\n    Dispatch<SetStateAction<() => Promise<boolean>>>\n  ] = useState<() => Promise<boolean>>(() => () => Promise.resolve(true))\n  const {\n    setActiveStepAction,\n    setWizardVisibilityAction,\n    setWizardStepsAction\n  } = useWizardActions(state, dispatch)\n\n  const setSteps: SetSteps = (steps) => {\n    setWizardStepsAction(steps)\n  }\n\n  const setValidator = (callback: () => boolean): void => {\n    setStepValidator(() => () => callback())\n  }\n\n  const setOnNextHandle = useCallback(\n    (callback: () => Promise<boolean>): void => {\n      setNextCallback(() => () => callback())\n    },\n    [setNextCallback]\n  )\n\n  const changeStep: ChangeStep = async (step) => {\n    if (!stepValidator()) {\n      return\n    }\n\n    if (!(await nextCallback())) {\n      return\n    }\n\n    if (!isNil(step) && is(Number, step)) {\n      setActiveStepAction(step)\n    } else {\n      setActiveStepAction(state.activeStep + 1)\n    }\n  }\n\n  const setVisibility: SetVisibility = (isVisible) => {\n    setWizardVisibilityAction(isVisible)\n  }\n\n  return (\n    <WizardContext.Provider\n      value={{\n        state,\n        setSteps,\n        changeStep,\n        setVisibility,\n        setValidator,\n        setOnNextHandle\n      }}\n    >\n      {children}\n    </WizardContext.Provider>\n  )\n}\n","import React, { useState } from 'react'\n// @ts-ignore\nimport ReactMarkdown from 'react-markdown'\n\nconst ExampleWrapper = ({ title, id, example: Example, doc }: any) => {\n  const [docsOpen, setDocsOpen] = useState(false)\n  return (\n    <>\n      <h4 id={id}>{title}</h4>\n      <div className='example row'>\n        <Example />\n        <div className={'example-doc'}>\n          {docsOpen && <ReactMarkdown source={doc} />}\n        </div>\n        <button\n          className='example-toggle'\n          onClick={() => setDocsOpen((p) => !p)}\n        >\n          {docsOpen ? 'Hide Code' : 'Show Code'}\n        </button>\n      </div>\n    </>\n  )\n}\n\nexport default ExampleWrapper\n","import React, { Suspense } from 'react'\n\nimport SimpleFormValidationExample from './examples/simple-form-validation/SimpleFormValidation'\nimport ExampleWrapper from './examples/ExampleWrapper'\n\n// @ts-ignore\nimport SimpleFormValidation from './examples/simple-form-validation/SimpleFormValidation.md'\n\nconst Examples = () => {\n  return (\n    <Suspense fallback={'...'}>\n      <h2 id='examples'>Examples</h2>\n      <ExampleWrapper\n        example={SimpleFormValidationExample}\n        doc={SimpleFormValidation}\n        title={'Simple Form validation'}\n        id='examples-sfv'\n      />\n    </Suspense>\n  )\n}\n\nexport default Examples\n","import React from 'react'\n\nimport './index.css'\nimport About from './sections/About'\nimport SideBar from './sections/Sidebar'\nimport Header from './sections/Header'\nimport Notice from './sections/Notice'\nimport Installation from './sections/Instalation'\nimport Usage from './sections/Usage'\nimport Examples from './sections/Examples'\n\nconst App = () => {\n  return (\n    <div className='container-fluid'>\n      <Header />\n      <Notice />\n      <div className='row flex-center'>\n        <SideBar />\n        <div className='md-8 offset-1'>\n          <div className='paper'>\n            <About />\n            <div className='section'>\n              <Installation />\n            </div>\n            <div className='section'>\n              <Usage />\n            </div>\n            <div className='section'>\n              <Examples />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","module.exports = __webpack_public_path__ + \"static/media/SimpleFormValidation.27ffdb5e.md\";"],"sourceRoot":""}