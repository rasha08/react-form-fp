{"version":3,"sources":["sections/examples/simple-form-validation/SimpleFormValidation.tsx","sections/About.tsx","sections/Sidebar.tsx","sections/Header.tsx","sections/Notice.tsx","sections/Instalation.tsx","sections/Usage.tsx","sections/examples/ExampleWrapper.tsx","../../src/form/reducer.ts","../../src/form/types.ts","../../src/utils/useValidatiion.ts","../../src/form/context.tsx","../../src/form/actions.ts","../../src/wizard/context.tsx","sections/examples/conditional-form-validation/ConditionalFormValidationExample.tsx","sections/examples/dynamic-validators/DynamicValidatorsExample.tsx","sections/Examples.tsx","App.tsx","index.tsx"],"names":["FormName","FormField","About","id","SideBar","className","href","Header","type","name","htmlFor","target","rel","Notice","Installation","Usage","ExampleWrapper","title","Example","example","Doc","doc","useState","docsOpen","setDocsOpen","onClick","p","formReducer","state","action","errors","error","value","useValidation","setErrorIfNeeded","curryN","setError","fieldName","clearError","validate","has","formName","validationSchema","validateField","validateAll","Object","FormContext","createContext","useFormContext","useContext","FormContextProvider","children","useReducer","setFieldValueAction","dispatch","payload","field","setFieldErrorAction","clearFieldError","useFormActions","formField","setFieldValue","validateForm","values","setValidator","setValidationSchema","previousSchema","validator","validation","firstName","val","trim","lastName","SimpleFormValidationExample","handleFieldChange","useCallback","submit","alert","JSON","stringify","onChange","FirstName","onBlur","LastName","initialState","hasKids","numberOfChildren","ConditionalFormValidationExample","handleCheckboxChange","HasKids","checked","NumberOfChildren","undefined","married","wifeName","DynamicValidators","useMemo","Married","useEffect","WifeName","length","Examples","SimpleFormValidation","lazy","ConditionalFormValidation","fallback","DynamicValidatorsExample","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f5121ff0.chunk.js","sourcesContent":["import React, { useCallback, ChangeEvent } from 'react'\nimport {\n  FormContextProvider,\n  ValidationSchema,\n  useFormContext\n} from 'react-form-fp'\n\nenum FormName {\n  Example = 'example'\n}\nenum FormField {\n  FirstName = 'firstName',\n  LastName = 'lastName'\n}\n\ntype FormState = {\n  firstName: string\n  lastName: string\n}\n\nconst validation: ValidationSchema<FormName, FormField> = {\n  example: {\n    firstName: (val: string) =>\n      !!val.trim() ? null : 'First name is required',\n    lastName: () => null // Empty validator\n  }\n}\n\nconst SimpleFormValidationExample = () => {\n  const {\n    setFieldValue,\n    validate,\n    validateForm,\n    state,\n    state: { errors, example }\n  } = useFormContext<FormName, FormState>()\n\n  const handleFieldChange = useCallback(\n    (field: FormField) => ({\n      target: { value }\n    }: ChangeEvent<HTMLInputElement>) => {\n      setFieldValue(FormName.Example)(field)(value)\n    },\n    [setFieldValue]\n  )\n\n  const validateField = useCallback(\n    (field: FormField) => ({\n      target: { value }\n    }: ChangeEvent<HTMLInputElement>) => {\n      validate(FormName.Example)(field)(value || example[field])\n    },\n    [validate, example]\n  )\n\n  const submit = useCallback(() => {\n    if (validateForm(FormName.Example, example)) {\n      alert(JSON.stringify(example, null, 2))\n    }\n  }, [validateForm, example])\n\n  return (\n    <>\n      <div className='form-group col-6'>\n        <label>First Name</label>\n        <input\n          value={example.firstName}\n          onChange={handleFieldChange(FormField.FirstName)}\n          onBlur={validateField(FormField.FirstName)}\n        />\n        {!!errors.firstName && (\n          <p className='text-danger'>{errors.firstName}</p>\n        )}\n\n        <label>Last Name</label>\n        <input\n          value={example.lastName}\n          onChange={handleFieldChange(FormField.LastName)}\n          onBlur={validateField(FormField.LastName)}\n        />\n        {!!errors.lastName && <p className='text-danger'>{errors.lastName}</p>}\n\n        <button onClick={submit}>Submit Form</button>\n      </div>\n      <div className='col-6'>\n        <b>Form ContextState</b>\n        <pre>\n          <code>{JSON.stringify(state, null, 2)}</code>\n        </pre>\n      </div>\n    </>\n  )\n}\n\nexport default () => (\n  <FormContextProvider<FormName, FormState>\n    initialState={{ example: { firstName: '', lastName: '' } }}\n    validationSchema={validation}\n  >\n    <SimpleFormValidationExample />\n  </FormContextProvider>\n)\n","import React from 'react'\n\nconst About = () => (\n  <>\n    <h1 id='about'>React Form FP</h1>\n    <hr />\n    <blockquote>\n      Yet another form library for React, created as context provider, following\n      functional programming principles.{' '}\n    </blockquote>\n    <hr />\n    <p>\n      React Form FP is a state management and validation library for easy form\n      manipulation. Entire API is exposed though context provider, so it makes\n      it easy to work with <b>class components</b> or{' '}\n      <b>functional components</b>\n    </p>\n\n    <p>\n      Library has two major functionalities <b>FormContext</b> for form state\n      and validation and <b>WizardContext</b> for multi-step forms.\n    </p>\n  </>\n)\n\nexport default About\n","import React from 'react'\n\nconst SideBar = () => {\n  return (\n    <div className='md-3 sidebar'>\n      <div className='paper'>\n        <h4>\n          <a href='#about'>About</a>\n        </h4>\n        <h4>\n          <a href='#installation'>Installation</a>\n        </h4>\n        <h4>\n          <a href='#usage'>Usage</a>\n          <small>\n            <a href='#form-state'>Form State</a>\n          </small>\n          <small>\n            <a href='#handle-change'>Handling updates</a>\n          </small>\n          <small>\n            <a href='#reading-errors'>Showing Errors</a>\n          </small>\n          <small>\n            <a href='#validation-schema'>Validation Schema</a>\n          </small>\n          <small>\n            <a href='#single-field-validator'>Single Field Validator</a>\n          </small>\n          <small>\n            <a href='#validate-form'>Validate Entire Form</a>\n          </small>\n          <small>\n            <a href='#set-field-validator'>Set Field Validator</a>\n          </small>\n        </h4>\n        <h4>\n          <a href='#examples'>Examples</a>\n          <small>\n            <a href='#examples-sfv'>Simple Form Validation</a>\n          </small>\n          <small>\n            <a href='#examples-cfv'>Conditional Form Validation</a>\n          </small>\n          <small>\n            <a href='#examples-dv'>Adding and removing validators</a>\n          </small>\n        </h4>\n      </div>\n    </div>\n  )\n}\n\nexport default SideBar\n","import React from 'react'\n\nconst Header = () => {\n  return (\n    <nav className='border fixed split-nav'>\n      <div className='nav-brand'>\n        <h3>\n          <a href='/'>React Form FP</a>\n        </h3>\n      </div>\n      <div className='collapsible'>\n        <input id='collapsible1' type='checkbox' name='collapsible1' />\n        <label htmlFor='collapsible1'>\n          <div className='bar1' />\n          <div className='bar2' />\n          <div className='bar3' />\n        </label>\n        <div className='collapsible-body'>\n          <ul className='inline'>\n            <li>\n              <a href='/'>About</a>\n            </li>\n            <li>\n              <a href='/'>Documentation</a>\n            </li>\n            <li>\n              <a\n                href='https://github.com/rasha08/react-form-fp'\n                target='_blank'\n                rel='noopener noreferrer'\n              >\n                Github\n              </a>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  )\n}\n\nexport default Header\n","import React from 'react'\n\nconst Notice = () => {\n  return (\n    <div className='row flex-center beta-warn'>\n      <div className='md-6'>\n        <input className='alert-state' id='alert-4' type='checkbox' />\n        <div className='alert alert-warning dismissible'>\n          React Form FP library is still in beta version\n          <label className='btn-close' htmlFor='alert-4'>\n            X\n          </label>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Notice\n","import React from 'react'\n\nconst Installation = () => {\n  return (\n    <>\n      <h2 id='installation'>Installation</h2>\n      <p>\n        Install the package from <b>NPM</b> by running:\n      </p>\n      <code>npm install react-form-fp</code>\n      <p> or</p>\n      <code>yarn add react-form-fp</code>\n    </>\n  )\n}\n\nexport default Installation\n","import React from 'react'\n\nconst Usage = () => {\n  return (\n    <>\n      <h2 id='usage'>Usage</h2>\n      <p>Form Context has on 2 major blocks</p>\n      <ul>\n        <li>\n          State\n          <ul>\n            <li>Form State and Errors</li>\n            <li>Field value update handler</li>\n          </ul>\n        </li>\n        <li>\n          Validation Schema\n          <ul>\n            <li>Schema</li>\n            <li>\n              Validators\n              <ul>\n                <li>Single Field Validator</li>\n                <li>Entire Form Validator</li>\n                <li>Registering New Validators Dynamically</li>\n              </ul>\n            </li>\n          </ul>\n        </li>\n      </ul>\n      <h4 id='form-state'>Form State</h4>\n      <p>\n        Form State is created from the initial state provided to the{' '}\n        <b>\n          <i>FormContextProvider</i>\n        </b>{' '}\n        and extended with errors property.\n      </p>\n      <code>{`<FormContextProvider initialState={...} ...> ... </FormContextProvider>`}</code>\n      <p>\n        State model is really simple but strict, initial state must have form\n        name as top level key, and form fields as nested level properties, this\n        is because of support for multiple forms on single view as well as\n        multiple steps forms (Wizard).\n      </p>\n      <p>\n        <i>\n          So for example if we want to handle login form which have a username\n          and password fields, our initial state model would look like this:\n        </i>\n      </p>\n      <code>\n        {`\n        const initialState = {\n          login: {\n            username: '',\n            password: ''\n          }\n        }\n        `}\n      </code>\n      <p>\n        And inside of your component you can consume that state by using{' '}\n        <b>\n          <i>useFormContext()</i>\n        </b>\n      </p>\n      <code>{`const { state: { login } } = useFormContext()`}</code>\n      <p>\n        And this login object is of same structure as you initial state, so you\n        can now have some input with value, for example,{' '}\n        <b>\n          <i>username</i>\n        </b>\n      </p>\n      <code>{`<input value={login.username} ... />`}</code>\n\n      <h4 id='handle-change'>Field value update handler</h4>\n      <p>\n        To update any field value inside the form you need to use{' '}\n        <b>\n          <i>setFieldValue</i>\n        </b>{' '}\n        handler from{' '}\n        <b>\n          <i>useFormContext</i>\n        </b>\n        . It is a very simple method that is in charge of updating specific\n        field within the form.\n      </p>\n      <p>\n        Method is curried function and accepts 3 params{' '}\n        <b>\n          <i>formName</i>\n        </b>\n        <i>(form key in FormContext state) </i>\n        <b>\n          <i>field</i>\n        </b>\n        <i>(key within the form) </i>\n        <b>\n          <i>value</i>\n        </b>\n        <i>(new value for the field)</i>\n      </p>\n      <code>{`const { setFieldValue } = useFormContext()`}</code>\n      <br />\n      <code>...</code>\n      <br />\n      <code>{`const handleFormChange = setFieldValue('login')`}</code>\n      <br />\n      <code>\n        {`const handleFieldChange = (field) => ({ target: { value }}) => handleFormChange(field)(value);`}\n      </code>\n      <br />\n      <code>...</code>\n      <br />\n      <code>{`<input value={login.username} onChange={handleFieldChange('username')} ... />`}</code>\n\n      <h4 id='reading-errors'>Errors</h4>\n      <p>\n        Errors are stored inside of the{' '}\n        <b>\n          <i>FormContext state</i>\n        </b>{' '}\n        by the{' '}\n        <b>\n          <i>errors</i>\n        </b>{' '}\n        key and every form field that has a defined validator have either{' '}\n        <b>\n          <i>null</i>\n        </b>{' '}\n        or{' '}\n        <b>\n          <i>string</i>\n        </b>{' '}\n        value\n      </p>\n      <p>\n        In our login example, error message logic for <i>username</i> field\n        should look something like this\n      </p>\n      <code>...</code>\n      <br />\n      <code>{`{!!errors.username && <p className='text-danger'>{errors.username}</p>} `}</code>\n      <br />\n      <code>...</code>\n\n      <h4 id='validation-schema'>Validation Schema</h4>\n      <p>\n        Validation schema is used to define form validation and it follows the\n        same structure as initial form state\n      </p>\n      <code>{`{ [formName]: { formField: validatorFunc } }`}</code>\n      <p>\n        Validator function is a simple function that accepts a value and returns\n        either{' '}\n        <b>\n          <i>string | null</i>\n        </b>\n      </p>\n      <p>\n        {' '}\n        <b>\n          <i>ValidationSchema</i>\n        </b>{' '}\n        is generic type accepts two additional types{' '}\n        <b>\n          <i>FormName</i>\n        </b>{' '}\n        <b>\n          <i>FormType</i>\n        </b>\n        <code>\n          {`\n          export type Validator<VT = unknown, ST = unknown> = (\n            value: VT,\n            state?: ST\n          ) => string | null\n\n          export type ValidationSchema<\n            FormName extends number | string = string,\n            FormField extends number | string = string\n          > = {\n            [key in FormName]: {\n              [key in FormField]: Validator\n            }\n          }\n          `}\n        </code>\n      </p>\n      <p>So for our login form we can define a validation schema:</p>\n      <code>{`   {\n        login: {\n         firstName: (val: string) => !!val.trim() ? null : 'First name is required',\n         lastName: () => null // Empty validator\n       }\n    }`}</code>\n      <p>\n        The idea behind it is really simple, every field that has a defined\n        validator will be validated against it, and if validator returns a{' '}\n        <b>\n          <i>null</i>\n        </b>{' '}\n        field is valid.\n      </p>\n\n      <h4 id='single-field-validator'>Single Field Validator</h4>\n      <p>\n        Field validator is a function which takes field value as an argument and\n        returns either string or null. Additionally every validator gets a{' '}\n        <b>\n          <i>FormContext state</i>\n        </b>{' '}\n        as second a parameter, which can be useful when writing a conditional\n        validations{' '}\n        <i>\n          <small>\n            (if the field validation logic depends on a another field value\n            within the state. ex: Passport number validation is bound to\n            selected country)\n          </small>\n        </i>\n      </p>\n      <p>Validator function type is:</p>\n      <code>{`type Validator<VT, ST> = (value: VT, state?: ST) => string | null`}</code>\n\n      <h4 id='validate-form'>Validate Entire Form</h4>\n      <p>\n        Validate entire form will run all defined validator and return{' '}\n        <b>true</b> or <b>false</b>, also while running the validators will set\n        form errors if any of the validator fails\n      </p>\n      <p>Validate form function type is</p>\n      <code>{`ValidateForm<FormName extends string | number, T> = (formName: FormName, values: T) => boolean`}</code>\n\n      <h4 id='set-field-validator'>Set Field Validator</h4>\n      <p>\n        Set filed validator is used for adding, removing or updating validators\n        from initial validation schema.\n      </p>\n      <p>Type of setValidator function is: </p>\n      <code>{`SetValidator<FormName extends string | number, T, ValueType = unknown> = (\n  formName: FormName,\n  field: keyof T,\n  validator: Validator<ValueType>\n) => void`}</code>\n    </>\n  )\n}\n\nexport default Usage\n","import React, { useState } from 'react'\n\nconst ExampleWrapper = ({ title, id, example: Example, doc: Doc }: any) => {\n  const [docsOpen, setDocsOpen] = useState(false)\n  return (\n    <>\n      <div className={'margin-top-large'} />\n      <hr />\n      <h4 id={id}>{title}</h4>\n      <div className='example row'>\n        <Example />\n        <div className={'example-doc'}>{docsOpen && <Doc />}</div>\n        <button\n          className='example-toggle'\n          onClick={() => setDocsOpen((p) => !p)}\n        >\n          {docsOpen ? 'Hide Code' : 'Show Code'}\n        </button>\n      </div>\n    </>\n  )\n}\n\nexport default ExampleWrapper\n","import {\n  CLEAR_FIELD_ERROR,\n  FormReducer,\n  SET_FILED_ERROR,\n  SET_FILED_VALUE\n} from './types'\n\nexport const formReducer: FormReducer = (state, action) => {\n  switch (action.type) {\n    case CLEAR_FIELD_ERROR:\n      return {\n        ...state,\n        ...{ errors: { ...state.errors, [action.payload.field]: null } }\n      }\n    case SET_FILED_ERROR:\n      return {\n        ...state,\n        ...{\n          errors: {\n            ...state.errors,\n            ...{ [action.payload.field]: action.payload.error }\n          }\n        }\n      }\n    case SET_FILED_VALUE:\n      return {\n        ...state,\n        ...{\n          [action.payload.formName]: {\n            ...state[action.payload.formName],\n            ...{\n              [action.payload.field]: action.payload.value\n            }\n          }\n        }\n      }\n    default:\n      return state\n  }\n}\n","export const SET_FILED_VALUE = 'SET_FILED_VALUE'\nexport const SET_FILED_ERROR = 'SET_FIELD_ERROR'\nexport const CLEAR_FIELD_ERROR = 'CLEAR_FIELD_ERROR'\n\nexport type FieldName<T> = keyof T\nexport type FieldValue = any // TODO find alternate solution\nexport type ErrorState<T> = {\n  errors: {\n    [key in FieldName<T>]: string | null\n  }\n}\n\nexport type FormContextState<FormName extends number | string, T> = {\n  [key in FormName]: T\n} &\n  ErrorState<T> &\n  unknown\n\nexport type StateChange<T> = {\n  field: FieldName<T>\n}\n\nexport type SetFieldValueActionPayload<T, FormName> = StateChange<T> & {\n  value: FieldValue\n  formName: FormName\n}\n\nexport type SetFieldValueAction<T, FormName> = {\n  type: typeof SET_FILED_VALUE\n  payload: SetFieldValueActionPayload<T, FormName>\n}\n\nexport type SetFieldErrorActionPayload<T> = StateChange<T> & {\n  error: string\n}\n\nexport type SetFieldErrorAction<T> = {\n  type: typeof SET_FILED_ERROR\n  payload: SetFieldErrorActionPayload<T>\n}\n\nexport type ClearFieldErrorAction<T> = {\n  type: typeof CLEAR_FIELD_ERROR\n  payload: StateChange<T>\n}\n\nexport type FormReducer = <FormName extends string | number, T>(\n  state: FormContextState<FormName, T>,\n  action:\n    | SetFieldValueAction<T, FormName>\n    | SetFieldErrorAction<T>\n    | ClearFieldErrorAction<T>\n) => FormContextState<FormName, T>\n\nexport type UseFormActions<FormName, T> = {\n  setFieldValueAction: (\n    formName: FormName,\n    field: FieldName<T>,\n    value: FieldValue\n  ) => void\n  setFieldErrorAction: (field: FieldName<T>, error: string) => void\n  clearFieldError: (field: FieldName<T>) => void\n}\n\nexport type FormActionDispatcher<FormName, T> = (\n  action:\n    | SetFieldValueAction<T, FormName>\n    | SetFieldErrorAction<T>\n    | ClearFieldErrorAction<T>\n) => void\n","import { has, curryN } from 'ramda'\n\nexport type Validator<VT = any, ST = any> = (\n  value: VT,\n  state?: ST\n) => string | null\n\nexport type ValidationSchema<\n  FormName extends number | string = string,\n  FormField extends number | string = string\n> = {\n  [key in FormName]: {\n    [key in FormField]: Validator\n  }\n}\n\nexport const useValidation = (\n  validationSchema: ValidationSchema,\n  setError: (field: any, error: string) => void,\n  clearError: (field: any) => void\n) => {\n  const setErrorIfNeeded = curryN(\n    2,\n    (fieldName: string, error: string | null) => {\n      return error ? setError(fieldName, error) : clearError(fieldName)\n    }\n  )\n\n  const validate = curryN(\n    4,\n    (\n      formName: string | any,\n      fieldName: string | any,\n      value: any,\n      state?: any\n    ): void => {\n      if (!has(formName, validationSchema)) {\n        return\n      }\n      if (!has(fieldName, validationSchema[formName])) {\n        return\n      }\n\n      const validateField = validationSchema[formName][fieldName]\n\n      setErrorIfNeeded(fieldName as any)(validateField(value, state))\n    }\n  )\n\n  const validateAll = (\n    formName: string | number,\n    values: { [key: string]: any },\n    state?: any\n  ): boolean => {\n    const errors: boolean[] = []\n\n    const addToErrors = (error: string | null) => {\n      if (error) {\n        errors.push(!!errors)\n      }\n\n      return error\n    }\n\n    Object.entries(values).forEach(([fieldName, value]) => {\n      if (!has(formName as string, validationSchema)) {\n        return\n      }\n      if (!has(fieldName, validationSchema[formName])) {\n        return\n      }\n\n      setErrorIfNeeded(fieldName as any)(\n        addToErrors(validationSchema[formName][fieldName](value, state))\n      )\n    })\n\n    return !errors.length\n  }\n\n  return { validate, validateAll }\n}\n","import React, {\n  ComponentProps,\n  createContext,\n  FC,\n  useContext,\n  useReducer,\n  useState\n} from 'react'\nimport {\n  FieldName,\n  FieldValue,\n  FormActionDispatcher,\n  FormContextState\n} from './types'\nimport { formReducer } from './reducer'\nimport { useFormActions } from './actions'\nimport {\n  useValidation,\n  ValidationSchema,\n  Validator\n} from '../utils/useValidatiion'\n\ntype SetValidator<FormName extends string | number, T, ValueType = any> = (\n  formName: FormName,\n  field: keyof T,\n  validator: Validator<ValueType>\n) => void\n\ntype Validate<FormName extends string | number, T> = (\n  formName: FormName\n) => (fieldName: FieldName<T>) => (value: FieldValue) => void\ntype SetFieldValue<FormName extends string | number, T> = (\n  formName: FormName\n) => (field: FieldName<T>) => (value: FieldValue) => void\ntype ValidateForm<FormName extends string | number, T> = (\n  formName: FormName,\n  values: T\n) => boolean\n\ntype UseFormContext<FormName extends string | number, T> = {\n  state: FormContextState<FormName, T>\n  validate: Validate<FormName, T>\n  setFieldValue: SetFieldValue<FormName, T>\n  validateForm: ValidateForm<FormName, T>\n  setValidator: SetValidator<FormName, T>\n}\n\nconst FormContext = createContext({} as any)\nexport const useFormContext = <FormName extends string | number, T>() =>\n  useContext<UseFormContext<FormName, T>>(FormContext)\n\ninterface Props<FormName extends string | number, T>\n  extends ComponentProps<FC> {\n  initialState: { [key in FormName]: T } | unknown\n  validationSchema: ValidationSchema\n}\n\ntype Form = <FormName extends string | number, T>(\n  props: Props<FormName, T>\n) => JSX.Element\n\nexport const FormContextProvider: Form = <FormName extends string | number, T>({\n  initialState,\n  validationSchema: vs,\n  children\n}) => {\n  const [state, dispatch] = useReducer(formReducer, {\n    ...initialState,\n    ...{ errors: {} }\n  })\n\n  const [validationSchema, setValidationSchema] = useState(vs)\n\n  const {\n    setFieldErrorAction,\n    clearFieldError,\n    setFieldValueAction\n  } = useFormActions<FormName, T>(\n    state as FormContextState<FormName, T>,\n    dispatch as FormActionDispatcher<FormName, T>\n  )\n\n  const { validate: validateField, validateAll } = useValidation(\n    validationSchema,\n    setFieldErrorAction,\n    clearFieldError\n  )\n\n  const validateForm: ValidateForm<FormName, T> = (formName, values) => {\n    return validateAll(formName, values, state)\n  }\n\n  const setFieldValue: SetFieldValue<FormName, T> = (formName) => (\n    fieldName\n  ) => (value) => {\n    if ((state as FormContextState<FormName, T>).errors[fieldName]) {\n      // @ts-ignore\n      validate(formName)(fieldName)(value)\n    }\n\n    setFieldValueAction(formName, fieldName, value)\n  }\n\n  const setValidator: SetValidator<FormName, T> = (\n    formName,\n    field,\n    validator\n  ) => {\n    setValidationSchema((previousSchema) => ({\n      ...previousSchema,\n      [formName]: {\n        ...previousSchema[formName],\n        [field]: validator\n      }\n    }))\n  }\n\n  const validate: Validate<FormName, T> = (formName) => (formField) => (\n    value: any\n  ) => validateField(formName, formField, value, state)\n  return (\n    <FormContext.Provider\n      value={{ setFieldValue, validate, state, validateForm, setValidator }}\n    >\n      {children}\n    </FormContext.Provider>\n  )\n}\n","import {\n  CLEAR_FIELD_ERROR,\n  FieldName,\n  FieldValue,\n  FormActionDispatcher,\n  FormContextState,\n  SET_FILED_ERROR,\n  SET_FILED_VALUE,\n  UseFormActions\n} from './types'\n\nexport const useFormActions = <FormName extends string | number, T>(\n  state: FormContextState<FormName, T>,\n  dispatch: FormActionDispatcher<FormName, T>\n): UseFormActions<FormName, T> => {\n  const setFieldValueAction = (\n    formName: FormName,\n    field: FieldName<T>,\n    value: FieldValue\n  ): void => {\n    dispatch({\n      type: SET_FILED_VALUE,\n      payload: {\n        formName,\n        field,\n        value\n      }\n    })\n  }\n\n  const setFieldErrorAction = (field: FieldName<T>, error: string): void => {\n    dispatch({\n      type: SET_FILED_ERROR,\n      payload: {\n        field,\n        error\n      }\n    })\n  }\n\n  const clearFieldError = (field: FieldName<T>): void => {\n    if (!state.errors[field]) {\n      return\n    }\n\n    dispatch({\n      type: CLEAR_FIELD_ERROR,\n      payload: {\n        field\n      }\n    })\n  }\n\n  return { setFieldValueAction, setFieldErrorAction, clearFieldError }\n}\n","import React, {\n  ComponentProps,\n  createContext,\n  Dispatch,\n  FC,\n  SetStateAction,\n  useCallback,\n  useContext,\n  useReducer,\n  useState\n} from 'react'\nimport { is, isNil } from 'ramda'\nimport { wizardReducer } from './reducer'\nimport { useWizardActions } from './actions'\nimport { WizardContextState, WizardStep } from './types'\n\ntype ChangeStep = (step?: number) => void\ntype SetVisibility = (isVisible: boolean) => void\ntype SetSteps = (steps: WizardStep[]) => void\ntype StepValidator = () => boolean\ntype NextHandler = () => Promise<boolean>\n\ntype WizardContext = {\n  state: WizardContextState\n  changeStep: ChangeStep\n  setVisibility: SetVisibility\n  setSteps: SetSteps\n  setValidator: Dispatch<StepValidator>\n  setOnNextHandle: Dispatch<NextHandler>\n}\n\nconst WizardContext = createContext({} as WizardContext)\n\nexport const useWizardContext = (): WizardContext => useContext(WizardContext)\n\nexport interface Props extends ComponentProps<FC> {\n  steps: WizardStep[]\n  activeStep?: number\n}\n\nexport const WizardContextProvider: FC<Props> = ({\n  steps,\n  activeStep = 0,\n  children\n}) => {\n  const [state, dispatch] = useReducer(wizardReducer, {\n    showWizard: true,\n    steps,\n    activeStep\n  })\n\n  const [stepValidator, setStepValidator]: [\n    StepValidator,\n    Dispatch<SetStateAction<() => boolean>>\n  ] = useState<() => boolean>(() => () => true)\n  const [nextCallback, setNextCallback]: [\n    NextHandler,\n    Dispatch<SetStateAction<() => Promise<boolean>>>\n  ] = useState<() => Promise<boolean>>(() => () => Promise.resolve(true))\n  const {\n    setActiveStepAction,\n    setWizardVisibilityAction,\n    setWizardStepsAction\n  } = useWizardActions(state, dispatch)\n\n  const setSteps: SetSteps = (steps) => {\n    setWizardStepsAction(steps)\n  }\n\n  const setValidator = (callback: () => boolean): void => {\n    setStepValidator(() => () => callback())\n  }\n\n  const setOnNextHandle = useCallback(\n    (callback: () => Promise<boolean>): void => {\n      setNextCallback(() => () => callback())\n    },\n    [setNextCallback]\n  )\n\n  const changeStep: ChangeStep = async (step) => {\n    if (!stepValidator()) {\n      return\n    }\n\n    if (!(await nextCallback())) {\n      return\n    }\n\n    if (!isNil(step) && is(Number, step)) {\n      setActiveStepAction(step)\n    } else {\n      setActiveStepAction(state.activeStep + 1)\n    }\n  }\n\n  const setVisibility: SetVisibility = (isVisible) => {\n    setWizardVisibilityAction(isVisible)\n  }\n\n  return (\n    <WizardContext.Provider\n      value={{\n        state,\n        setSteps,\n        changeStep,\n        setVisibility,\n        setValidator,\n        setOnNextHandle\n      }}\n    >\n      {children}\n    </WizardContext.Provider>\n  )\n}\n","import React, { useCallback, ChangeEvent } from 'react'\nimport {\n  FormContextProvider,\n  ValidationSchema,\n  useFormContext\n} from 'react-form-fp'\n\nenum FormName {\n  Example = 'example'\n}\nenum FormField {\n  FirstName = 'firstName',\n  LastName = 'lastName',\n  NumberOfChildren = 'numberOfChildren',\n  HasKids = 'hasKids'\n}\n\ntype FormState = {\n  firstName: string\n  lastName: string\n  hasKids: boolean\n  numberOfChildren?: number\n}\n\nconst validation: ValidationSchema<FormName, FormField> = {\n  example: {\n    firstName: (val: string) =>\n      !!val.trim() ? null : 'First name is required',\n    lastName: () => null,\n    hasKids: () => null,\n    numberOfChildren: (val: number, state?: { example: FormState }) => {\n      if (state?.example.hasKids) {\n        return val > 0 ? null : 'Please specify how many children do you have.'\n      }\n\n      return null\n    }\n  }\n}\n\nconst ConditionalFormValidationExample = () => {\n  const {\n    setFieldValue,\n    validate,\n    validateForm,\n    state,\n    state: { errors, example }\n  } = useFormContext<FormName, FormState>()\n\n  const handleFieldChange = useCallback(\n    (field: FormField) => ({\n      target: { value }\n    }: ChangeEvent<HTMLInputElement>) => {\n      setFieldValue(FormName.Example)(field)(value)\n    },\n    [setFieldValue]\n  )\n\n  const handleCheckboxChange = useCallback(() => {\n    setFieldValue(FormName.Example)(FormField.HasKids)(!example.hasKids)\n  }, [setFieldValue, example])\n\n  const validateField = useCallback(\n    (field: FormField) => ({\n      target: { value }\n    }: ChangeEvent<HTMLInputElement>) => {\n      validate(FormName.Example)(field)(value || example[field])\n    },\n    [validate, example]\n  )\n\n  const submit = useCallback(() => {\n    if (validateForm(FormName.Example, example)) {\n      alert(JSON.stringify(example, null, 2))\n    }\n  }, [validateForm, example])\n\n  return (\n    <>\n      <div className='form-group col-6'>\n        <label>First Name</label>\n        <input\n          value={example.firstName}\n          onChange={handleFieldChange(FormField.FirstName)}\n          onBlur={validateField(FormField.FirstName)}\n        />\n        {!!errors.firstName && (\n          <p className='text-danger'>{errors.firstName}</p>\n        )}\n\n        <label>Last Name</label>\n        <input\n          value={example.lastName}\n          onChange={handleFieldChange(FormField.LastName)}\n          onBlur={validateField(FormField.LastName)}\n        />\n        {!!errors.lastName && <p className='text-danger'>{errors.lastName}</p>}\n\n        <label className='row paper-check'>\n          <input\n            id='paperSwitch4'\n            name='paperSwitch4'\n            type='checkbox'\n            checked={example.hasKids}\n            onChange={handleCheckboxChange}\n          />\n          <span className='paper-switch-slider'>Do you have kids?</span>\n        </label>\n        <br />\n        {example.hasKids && (\n          <>\n            <label>Number Of children</label>\n            <input\n              type='number'\n              value={example.numberOfChildren}\n              onChange={handleFieldChange(FormField.NumberOfChildren)}\n              onBlur={validateField(FormField.NumberOfChildren)}\n            />\n            {!!errors.numberOfChildren && (\n              <p className='text-danger'>{errors.numberOfChildren}</p>\n            )}\n          </>\n        )}\n        <button onClick={submit}>Submit Form</button>\n      </div>\n      <div className='col-6'>\n        <b>Form ContextState</b>\n        <pre>\n          <code>{JSON.stringify(state, null, 2)}</code>\n        </pre>\n      </div>\n    </>\n  )\n}\n\nexport default () => (\n  <FormContextProvider<FormName, FormState>\n    initialState={{\n      example: {\n        firstName: '',\n        lastName: '',\n        hasKids: false,\n        numberOfChildren: undefined\n      }\n    }}\n    validationSchema={validation}\n  >\n    <ConditionalFormValidationExample />\n  </FormContextProvider>\n)\n","import React, { useCallback, ChangeEvent, useEffect, useMemo } from 'react'\nimport {\n  FormContextProvider,\n  ValidationSchema,\n  useFormContext\n} from 'react-form-fp'\n\nenum FormName {\n  Example = 'example'\n}\nenum FormField {\n  FirstName = 'firstName',\n  LastName = 'lastName',\n  Married = 'married',\n  WifeName = 'wifeName'\n}\n\ntype FormState = {\n  firstName: string\n  lastName: string\n  married: boolean\n  wifeName: string\n}\n\nconst validation: ValidationSchema<FormName, FormField> = {\n  example: {\n    firstName: (val: string) =>\n      !!val.trim() ? null : 'First name is required',\n    lastName: () => null,\n    married: () => null,\n    wifeName: () => null\n  }\n}\n\nconst DynamicValidators = () => {\n  const {\n    setFieldValue,\n    validate,\n    validateForm,\n    state,\n    state: { errors, example },\n    setValidator\n  } = useFormContext<FormName, FormState>()\n\n  const married = useMemo(() => example.married, [example])\n\n  const handleFieldChange = useCallback(\n    (field: FormField) => ({\n      target: { value }\n    }: ChangeEvent<HTMLInputElement>) => {\n      setFieldValue(FormName.Example)(field)(value)\n    },\n    [setFieldValue]\n  )\n\n  const handleCheckboxChange = useCallback(() => {\n    setFieldValue(FormName.Example)(FormField.Married)(!example.married)\n  }, [setFieldValue, example])\n\n  const validateField = useCallback(\n    (field: FormField) => ({\n      target: { value }\n    }: ChangeEvent<HTMLInputElement>) => {\n      validate(FormName.Example)(field)(value || example[field])\n    },\n    [validate, example]\n  )\n\n  const submit = useCallback(() => {\n    if (validateForm(FormName.Example, example)) {\n      alert(JSON.stringify(example, null, 2))\n    }\n  }, [validateForm, example])\n\n  useEffect(() => {\n    if (married) {\n      // Set new validator\n      setValidator(FormName.Example, FormField.WifeName, (val: string) => {\n        return val?.length > 2 ? null : 'Name must be at least 3 chars long.'\n      })\n    } else {\n      // Clear validator\n      setValidator(FormName.Example, FormField.WifeName, () => null)\n    }\n  }, [married])\n\n  return (\n    <>\n      <div className='form-group col-6'>\n        <label>First Name</label>\n        <input\n          value={example.firstName}\n          onChange={handleFieldChange(FormField.FirstName)}\n          onBlur={validateField(FormField.FirstName)}\n        />\n        {!!errors.firstName && (\n          <p className='text-danger'>{errors.firstName}</p>\n        )}\n\n        <label>Last Name</label>\n        <input\n          value={example.lastName}\n          onChange={handleFieldChange(FormField.LastName)}\n          onBlur={validateField(FormField.LastName)}\n        />\n        {!!errors.lastName && <p className='text-danger'>{errors.lastName}</p>}\n\n        <label className='row paper-check'>\n          <input\n            id='switch8'\n            type='checkbox'\n            checked={example.married}\n            onChange={handleCheckboxChange}\n          />\n          <span className='paper-switch-slider'>Are you married?</span>\n        </label>\n        <br />\n        {example.married && (\n          <>\n            <label>Wife's Name</label>\n            <input\n              value={example.wifeName}\n              onChange={handleFieldChange(FormField.WifeName)}\n              onBlur={validateField(FormField.WifeName)}\n            />\n            {!!errors.wifeName && (\n              <p className='text-danger'>{errors.wifeName}</p>\n            )}\n          </>\n        )}\n        <button onClick={submit}>Submit Form</button>\n      </div>\n      <div className='col-6'>\n        <b>Form ContextState</b>\n        <pre>\n          <code>{JSON.stringify(state, null, 2)}</code>\n        </pre>\n      </div>\n    </>\n  )\n}\n\nexport default () => (\n  <FormContextProvider<FormName, FormState>\n    initialState={{\n      example: {\n        firstName: '',\n        lastName: '',\n        married: false,\n        wifeName: undefined\n      }\n    }}\n    validationSchema={validation}\n  >\n    <DynamicValidators />\n  </FormContextProvider>\n)\n","import React, { lazy, Suspense } from 'react'\n\nimport ExampleWrapper from './examples/ExampleWrapper'\n// @ts-ignore\nimport { importMDX } from 'mdx.macro'\n\nimport SimpleFormValidationExample from './examples/simple-form-validation/SimpleFormValidation'\nimport ConditionalFormValidationExample from './examples/conditional-form-validation/ConditionalFormValidationExample'\nimport DynamicValidatorsExample from './examples/dynamic-validators/DynamicValidatorsExample'\n\nconst Examples = () => {\n  const SimpleFormValidation = lazy(() =>\n    importMDX('./examples/simple-form-validation/SimpleFormValidation.mdx')\n  )\n  const ConditionalFormValidation = lazy(() =>\n    importMDX(\n      './examples/conditional-form-validation/ConditionalFormValidation.mdx'\n    )\n  )\n\n  const DynamicValidators = lazy(() =>\n    importMDX('./examples/dynamic-validators/DynamicValidators.mdx')\n  )\n\n  return (\n    <Suspense fallback={'...'}>\n      <h2 id='examples'>Examples</h2>\n      <ExampleWrapper\n        example={SimpleFormValidationExample}\n        doc={SimpleFormValidation}\n        title={'Simple Form validation'}\n        id='examples-sfv'\n      />\n      <ExampleWrapper\n        example={ConditionalFormValidationExample}\n        doc={ConditionalFormValidation}\n        title={'Conditional Form validation'}\n        id='examples-cfv'\n      />\n      <ExampleWrapper\n        example={DynamicValidatorsExample}\n        doc={DynamicValidators}\n        title={'Adding and removing Validators'}\n        id='examples-dv'\n      />\n    </Suspense>\n  )\n}\n\nexport default Examples\n","import React from 'react'\n\nimport './index.css'\nimport About from './sections/About'\nimport SideBar from './sections/Sidebar'\nimport Header from './sections/Header'\nimport Notice from './sections/Notice'\nimport Installation from './sections/Instalation'\nimport Usage from './sections/Usage'\nimport Examples from './sections/Examples'\n\nconst App = () => {\n  return (\n    <div className='container-fluid'>\n      <Header />\n      <Notice />\n      <div className='row flex-center'>\n        <SideBar />\n        <div className='md-8 offset-1'>\n          <div className='paper'>\n            <About />\n            <div className='section'>\n              <Installation />\n            </div>\n            <div className='section'>\n              <Usage />\n            </div>\n            <div className='section'>\n              <Examples />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}